<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="hanstagram">
	<!-- 검색(일단 아이디만)  -->
	<select id="search" parameterType="String" resultType="spring.project.db.UsersVO">
		select * from users_3 where id like '%' || lower(#{keyword}) || '%'
	</select>
	
	<!-- 팔로우 리스트  -->
	<select id="follow" parameterType="String" resultType="spring.project.db.FollowVO">
		select * from follow_3 where follower = #{id}
	</select>
	
	<!-- 게시글 불러오기  -->
	
	<select id="boardlistmore" parameterType="Map" resultType="spring.project.db.BoardVO">
	select * from (select rownum r_num,a.* from (select * from board_3 where id in(select followee from follow_3 where follower=#{id} and state='0') or id=#{id} order by b_time desc) a)  where r_num between #{begin} and #{end}
	</select>
	
	<select id="boardlistcnt" parameterType="String" resultType="Integer">
		select count(*) from board_3 where id in(select followee from follow_3 where follower=#{id} and state='0') or id=#{id} order by b_time desc
	</select>
	
	<select id="boardlist" parameterType="Map" resultType="spring.project.db.BoardVO">
		select * from (select rownum as r_num, a.* from (select * from board_3 where id in(select followee from follow_3 where follower=#{id} and state='0') or id=#{id} order by b_time desc) a, board_3 b where a.b_idx=b.b_idx) where r_num between #{begin} and #{end}
	</select>
	
	<select id="morecomment" parameterType="String" resultType="spring.project.db.CommentVO">
		select * from comment_3 where b_idx = #{b_idx}
	</select>
	
	<select id="likecnt" parameterType="String" resultType="String">
		select count(*) from like_3 where b_idx = #{b_idx}
	</select>
	
	<select id="likestatechk" parameterType="Map" resultType="String">
		select count(*) from like_3 where b_idx = #{b_idx} and id = #{id}
	</select>
	
	<select id="commentlist" resultType="spring.project.db.CommentVO">
		select * from comment_3 order by c_time asc
	</select>
	
	<select id="commentone" parameterType="Map" resultType="String">
		select max(c_idx) from comment_3 where id=#{id} and b_idx = #{b_idx}
	</select>
	<delete id="deletecomment" parameterType="String">
		delete from comment_3 where c_idx=#{c_idx}
	</delete>
	<!-- 좋아요 상태 확인하기  -->
	
	<!-- 좋아요 삽입  -->
	<insert id="insertlike" parameterType="Map">
		insert into like_3 values(#{b_idx},#{id})
	</insert>
	
	<!-- 좋아요 삭제  -->
	<insert id="deletelike" parameterType="Map">
		delete from like_3 where id = #{id} and b_idx = #{b_idx}
	</insert>
	

	<select id="searchHash" parameterType="String" resultType="spring.project.db.BoardVO">
		select * from board_3 where b_content like '%' || #{keyword} || '%'
	</select>
	<select id="hashCnt" parameterType="String" resultType="Integer">
		select count(*) from (select b_idx, REPLACE(b_content, CHR(13),' ') AS b_content from board_3) a,board_3 b where regexp_like(a.b_content,#{hashtag}||' ' || '|' || #{hashtag}||'$') and a.b_idx=b.b_idx order by b_time desc
<!-- 		select count(*) hashcnt from board_3 where b_content like '%' || #{hashtag} || '%' -->
	</select>

	<!-- 게시글 좋아요 갯수 불러오기  -->
	<select id="likecount" parameterType="String" resultType="Integer">
		select count(id) from like_3 where b_idx = #{b_idx}
	</select>
	
	<!-- 댓글 삽입  -->
	<insert id="insertcomment" parameterType="Map">
		insert into comment_3 values(comment_3_seq.nextval,#{id},#{c_content},sysdate,#{b_idx})
	</insert>
	<select id="hashlist" parameterType="String" resultType="spring.project.db.BoardVO">
	select b.* from (select b_idx, REPLACE(b_content, CHR(13),' ') AS b_content from board_3) a,board_3 b where regexp_like(a.b_content,#{keyword}||' ' || '|' || #{keyword}||'$') and a.b_idx=b.b_idx order by b_time desc
<!-- 		select * from board_3 where b_content like '%' || #{keyword} || '%' order by b_time desc -->
	</select>
	<select id="hashlistcnt" parameterType="String" resultType="String">
		select count(*) like_count from like_3 where b_idx=#{b_idx}
	</select>
	<select id="hashbestlist" parameterType="String" resultType="spring.project.db.BoardVO">
		select b.*,c.like_count from (select b_idx, REPLACE(b_content, CHR(13),' ') AS b_content from board_3) a,board_3 b,(select b_idx,count(*) like_count from like_3 group by b_idx) c where regexp_like(a.b_content,#{keyword}||' ' || '|' || #{keyword}||'$') and a.b_idx=b.b_idx and a.b_idx=c.b_idx order by like_count desc

	</select>
	
	<select id="login" parameterType="Map" resultType="spring.project.db.UsersVO">
		select * from users_3 where id=#{id} and pwd=#{pwd}
	</select>
	
	<!--  타임라인 -->
	<select id="timelinelist" parameterType="String" resultType="spring.project.db.BoardVO">
		select * from board_3 where id=#{id}
	</select>
		<select id="commentcount" parameterType="String" resultType="String">
		select count(*) from comment_3 where b_idx =#{b_idx}
	</select>
	<select id="timeuser" parameterType="String" resultType="spring.project.db.UsersVO">
		select * from users_3 where id=#{id}
	</select>
	<select id="t_boardcount" parameterType="String" resultType="String">
		select count(*) from board_3 where id=#{id}
	</select>
	<select id="follower_tl" parameterType="String" resultType="spring.project.db.UsersVO">
		select * from users_3 where id in (select follower from follow_3 where followee=#{id} and state='0')
	</select>
	<select id="followee_tl" parameterType="String" resultType="spring.project.db.UsersVO">
		select * from users_3 where id in (select followee from follow_3 where follower=#{id} and state='0')
	</select>
		<select id="timelinecomment" parameterType="String" resultType="spring.project.db.CommentVO">
		select * from comment_3 where b_idx=#{b_idx}
	</select>
<!-- 	<insert id="follow" parameterType="Map">
		insert into follow_3 values(#{id},#{followeeId},0)
	</insert> -->
 
	<!-- 언팔로우하기 -->
<!-- 	<update id="unfolllow" parameterType="Map">
		update follow_3 set state = 3 where follower = #{id} and followee = #{fooloweeId};
	</update>
	 -->
	 <!-- 게시글 등록 -->
	<insert id="insertPost" parameterType="spring.project.db.BoardVO">
		insert into board_3 values(board_3_seq.nextval,#{id},sysdate,#{img_url},0,#{b_content})
	</insert>
	
	<!-- b_idx 큰값 가져오기 -->
	<select id="getMax_idx" resultType="Integer">
		select max(b_idx) from board_3
	</select>

	
	<insert id="usersJoin" parameterType="spring.project.db.UsersVO">
		insert into users_3 values(#{id},#{name},#{pwd},#{email},#{age},null)
	</insert>
	
	<select id="confirmName" parameterType="String" resultType="spring.project.db.UsersVO">
		select * from users_3 where id = #{id}
	</select>
	
	<update id="pwdUpdate" parameterType="Map">
		update users_3 set pwd = #{pwd} where id = #{id}
	</update>
	
	<update id="usersUpdate" parameterType="spring.project.db.UsersVO">
		update users_3 set id=#{id},name=#{name},pwd=#{pwd},email=#{email} where id= #{id}
	</update>
	
	<delete id="deleteUsers" parameterType="String">
		delete from users_3 where id = #{id}
	</delete>
	
   <!-- 팔로우하기 -->
    <select id="followCnt" parameterType="Map" resultType="spring.project.db.FollowVO">
      select * from follow_3 where FOLLOWER=#{id} and FOLLOWEE = #{followeeId}
   </select>
      <insert id="followInsert" parameterType="Map">
      insert into follow_3 values(#{id},#{followeeId},0)
   </insert>
   
   
   <!-- 팔로우상태변경하기 -->
    <update id="folllowState" parameterType="Map">
      update follow_3 set state = #{state} where follower = #{id} and FOLLOWEE = #{followeeId}
   </update>
   
   <!-- 상세보기 -->
   <select id="getDetail" parameterType="String" resultType="spring.project.db.BoardVO">
		select * from board_3 where b_idx=#{b_idx}
   </select>
</mapper>